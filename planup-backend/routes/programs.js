const express = require("express");
const router = express.Router();
const db = require("../config/dbConfig"); // Ensure this path is correct

if (!db) {
  console.error("Nincs adatb√°zis kapcsolat.");
  return res.status(500).json({ error: "Nincs adatb√°zis kapcsolat." });
}

// Programok lek√©rdez√©se
router.get("/", async (req, res) => {
  try {
    const [program] = await db.execute(`
      SELECT p.*, c.Name AS CityName
      FROM Programs p
      JOIN City c ON p.CityID = c.CityID
      ORDER BY RAND()
      LIMIT 1
    `);
    res.status(200).json(program); // Use 'program' instead of 'programs'
  } catch (error) {
    console.error("Hiba t√∂rt√©nt a programok lek√©rdez√©se sor√°n:", error.message);
    res
      .status(500)
      .json({ error: "Hiba t√∂rt√©nt a programok lek√©rdez√©se sor√°n." });
  }
});
// V√°rosok lek√©rdez√©se
// V√°rosok lek√©rdez√©se
router.get("/cities", async (req, res) => {
  try {
    const [cities] = await db.execute(`
      SELECT CityID, Name 
      FROM City 
      ORDER BY Name
    `);

    console.log("üèôÔ∏è V√°rosok lek√©rdezve:", cities.length);
    res.status(200).json(cities);
  } catch (error) {
    console.error(
      "üî• Hiba t√∂rt√©nt a v√°rosok lek√©rdez√©se sor√°n:",
      error.message
    );
    res
      .status(500)
      .json({ error: "Hiba t√∂rt√©nt a v√°rosok lek√©rdez√©se sor√°n." });
  }
});

// V√©letlenszer≈± program lek√©rdez√©se
// V√©letlenszer≈± program lek√©rdez√©se
router.get("/random", async (req, res) => {
  try {
    console.log("üîç V√©letlenszer≈± program lek√©r√©se indul...");

    // Sz≈±r√©si param√©terek feldolgoz√°sa
    const { duration, cost, city } = req.query;

    // Alap lek√©rdez√©s
    let query = `
      SELECT p.*, c.Name AS CityName
      FROM Programs p
      JOIN City c ON p.CityID = c.CityID
      WHERE 1=1
    `;

    const params = [];

    // Sz≈±r√©si felt√©telek hozz√°ad√°sa
    if (duration) {
      let durationValue;
      if (duration === "half_day") durationValue = 1;
      else if (duration === "whole_day") durationValue = 2;
      else if (duration === "weekend") durationValue = 3;

      if (durationValue) {
        query += ` AND p.Duration = ?`;
        params.push(durationValue);
      }
    }

    if (cost) {
      query += ` AND p.Cost = ?`;
      params.push(cost === "paid" ? 1 : 0);
    }

    // V√°ros sz≈±r≈ë hozz√°ad√°sa
    if (city) {
      query += ` AND p.CityID = ?`;
      params.push(city);
    }

    // V√©letlenszer≈± sorrend √©s limit
    query += ` ORDER BY RAND() LIMIT 1`;

    console.log("üîç SQL lek√©rdez√©s:", query, "Param√©terek:", params);

    const [programs] = await db.execute(query, params);

    if (programs.length === 0) {
      console.log("‚ö†Ô∏è Nincs t√∂bb el√©rhet≈ë program.");
      return res.json(null);
    }

    console.log("üéØ Visszak√ºld√∂tt program:", programs[0]);
    res.status(200).json(programs[0]);
  } catch (error) {
    console.error(
      "üî• Hiba t√∂rt√©nt egy v√©letlenszer≈± program lek√©rdez√©se sor√°n:",
      error.message
    );
    res
      .status(500)
      .json({
        error: "Hiba t√∂rt√©nt egy v√©letlenszer≈± program lek√©rdez√©se sor√°n.",
        details: error.message,
      });
  }
});

router.post("/programs/:id/like", async (req, res) => {
  try {
    const { userId } = req.body;
    const programId = req.params.id;

    if (!userId || !programId) {
      return res.status(400).json({ error: "Hi√°nyz√≥ userId vagy programId." });
    }

    console.log(
      `üëç Like hozz√°ad√°sa: UserID = ${userId}, ProgramID = ${programId}`
    );

    await db.execute(
      "INSERT INTO UserLikes (UserID, ProgramID) VALUES (?, ?) ON DUPLICATE KEY UPDATE ProgramID=ProgramID",
      [userId, programId]
    );

    res.status(200).json({ message: "Like sikeresen mentve!" });
  } catch (error) {
    console.error("üî• Hiba t√∂rt√©nt a like ment√©sekor:", error);
    res
      .status(500)
      .json({
        error: "Szerverhiba a like ment√©sekor.",
        details: error.message,
      });
  }
});

router.post("/programs/:id/dislike", async (req, res) => {
  try {
    const { userId } = req.body;
    const programId = req.params.id;

    if (!userId || !programId) {
      return res.status(400).json({ error: "Hi√°nyz√≥ userId vagy programId." });
    }

    console.log(
      `üëé Dislike hozz√°ad√°sa: UserID = ${userId}, ProgramID = ${programId}`
    );

    await db.execute(
      "DELETE FROM UserLikes WHERE UserID = ? AND ProgramID = ?",
      [userId, programId]
    );

    res.status(200).json({ message: "Dislike sikeresen mentve!" });
  } catch (error) {
    console.error("üî• Hiba t√∂rt√©nt a dislike ment√©sekor:", error);
    res
      .status(500)
      .json({
        error: "Szerverhiba a dislike ment√©sekor.",
        details: error.message,
      });
  }
});

router.get("/liked", async (req, res) => {
  try {
    const { userId } = req.query;

    if (!userId) {
      return res.status(400).json({ error: "Hi√°nyz√≥ userId param√©ter." });
    }

    console.log(`üîç Kedvelt programok lek√©r√©se UserID = ${userId}`);

    const [likedPrograms] = await db.execute(
      `
      SELECT p.*, c.Name AS CityName
      FROM Programs p
      JOIN City c ON p.CityID = c.CityID
      JOIN UserLikes ul ON p.ProgramID = ul.ProgramID
      WHERE ul.UserID = ?;
    `,
      [userId]
    );

    console.log("‚úÖ Kedvelt programok list√°ja:", likedPrograms);
    res.status(200).json(likedPrograms);
  } catch (error) {
    console.error(
      "üî• Hiba t√∂rt√©nt a kedvelt programok lek√©rdez√©se sor√°n:",
      error
    );
    res
      .status(500)
      .json({
        error: "Hiba t√∂rt√©nt a kedvelt programok lek√©rdez√©se sor√°n.",
        details: error.message,
      });
  }
});

router.get("/cities/with-programs", async (req, res) => {
  try {
    const [rows] = await db.execute(`
      SELECT DISTINCT c.CityID, c.Name
      FROM Programs p
      JOIN City c ON p.CityID = c.CityID
      ORDER BY c.Name ASC
    `);

    res.status(200).json(rows);
  } catch (error) {
    console.error("‚ö†Ô∏è Hiba a v√°rosok lek√©rdez√©sekor:", error.message);
    res.status(500).json({ error: "Hiba t√∂rt√©nt a v√°rosok lek√©rdez√©se sor√°n." });
  }
});


module.exports = router;
