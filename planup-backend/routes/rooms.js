const express = require('express');
const router = express.Router();
const mysql = require('mysql2/promise');
const db = require('../config/dbConfig');
const { v4: uuidv4 } = require('uuid'); // UUID import√°l√°sa

router.post('/', async (req, res) => {
  const { name, userId } = req.body;

  if (!name || !userId) {
    return res.status(400).json({ error: 'A szoba neve √©s a felhaszn√°l√≥i azonos√≠t√≥ k√∂telez≈ë!' });
  }

  try {
    const db = await mysql.createConnection(dbConfig);
    console.log("üîå Adatb√°zis kapcsolat sikeres!");

    const [rooms] = await db.execute('SELECT * FROM Rooms');
    console.log("üìä Szob√°k lek√©rdezve:", rooms);

    await db.end();
    res.status(200).json(rooms);
} catch (error) {
    console.error("üî• Hiba t√∂rt√©nt a szob√°k lek√©rdez√©se sor√°n:", error.message);
    res.status(500).json({ error: 'Hiba t√∂rt√©nt a szob√°k lek√©rdez√©se sor√°n', details: error.message });
}

});

// Szob√°k list√°z√°sa
router.get('/', async (req, res) => {
  try {
      console.log("üîå Teszt: kapcsolat l√©trehoz√°sa az adatb√°zishoz...");
      const [rooms] = await db.execute('SELECT * FROM Rooms'); // üîπ db.execute helyes h√≠v√°sa
      console.log("üìä Szob√°k sikeresen lek√©rdezve:", rooms);
      res.status(200).json(rooms);
  } catch (error) {
      console.error("üî• Hiba t√∂rt√©nt a szob√°k lek√©rdez√©se sor√°n:", error.message);
      res.status(500).json({ error: 'Hiba t√∂rt√©nt a szob√°k lek√©rdez√©se sor√°n', details: error.message });
  }
});

// Szob√°hoz csatlakoz√°s
router.post('/join', async (req, res) => {
    const { roomCode, userId } = req.body;

    if (!roomCode || !userId) {
        return res.status(400).json({ error: 'A szobak√≥d √©s a felhaszn√°l√≥ ID sz√ºks√©ges!' });
    }

    try {
        const db = await mysql.createConnection(dbConfig);
        const [roomResult] = await db.execute('SELECT RoomID FROM Rooms WHERE RoomCode = ?', [roomCode]);

        if (roomResult.length === 0) {
            await db.end();
            return res.status(404).json({ error: 'A megadott szobak√≥d nem l√©tezik!' });
        }

        const roomId = roomResult[0].RoomID;
        await db.execute('INSERT INTO RoomParticipants (RoomID, UserID) VALUES (?, ?)', [roomId, userId]);
        await db.end();
        res.status(200).json({ message: 'Sikeresen csatlakozt√°l a szob√°hoz!' });
    } catch (error) {
        console.error('Hiba a szob√°hoz csatlakoz√°s sor√°n:', error.message);
        res.status(500).json({ error: 'Hiba t√∂rt√©nt a szob√°hoz csatlakoz√°s sor√°n.', details: error.message });
    }
});

// Szoba t√∂rl√©se
router.delete('/:id', async (req, res) => {
    const { id } = req.params;
    try {
      const db = await mysql.createConnection(dbConfig);
      await db.execute('DELETE FROM RoomParticipants WHERE RoomID = ?', [id]);
      const [result] = await db.execute('DELETE FROM Rooms WHERE RoomID = ?', [id]);
      await db.end();

      if (result.affectedRows === 0) {
        return res.status(404).json({ error: 'Nem tal√°lhat√≥ szoba a megadott ID alapj√°n.' });
      }

      res.status(200).json({ message: 'Szoba sikeresen t√∂r√∂lve.' });
    } catch (err) {
      console.error('T√∂rl√©si hiba:', err.message);
      res.status(500).json({ error: 'Hiba t√∂rt√©nt a szoba t√∂rl√©sekor.', details: err.message });
    }
});

module.exports = router;