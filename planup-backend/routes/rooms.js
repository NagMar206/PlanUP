// Backend (rooms.js) - Friss√≠tve
const express = require('express');
const router = express.Router();
const mysql = require('mysql2/promise');
const db = require('../config/dbConfig');
const { v4: uuidv4 } = require('uuid');

// Szoba l√©trehoz√°sa - most m√°r random k√≥ddal
router.post('/', async (req, res) => {
    const { userId } = req.body;
    if (!userId) {
        return res.status(400).json({ error: 'A felhaszn√°l√≥i azonos√≠t√≥ k√∂telez≈ë!' });
    }
    
    try {
        const roomCode = uuidv4().substring(0, 8).toUpperCase();
        await db.execute('INSERT INTO Rooms (RoomCode, CreatedByUserID) VALUES (?, ?)', [roomCode, userId]);
        req.session.roomCode = roomCode;
        req.session.userId = userId;
        req.session.createdAt = Date.now();
        res.status(200).json({ message: 'Szoba l√©trehozva!', roomCode });
    } catch (error) {
        console.error('üî• Hiba a szoba l√©trehoz√°sakor:', error.message);
        res.status(500).json({ error: 'Hiba t√∂rt√©nt a szoba l√©trehoz√°sakor.', details: error.message });
    }
});

// Szob√°hoz csatlakoz√°s
router.post('/join', async (req, res) => {
    const { roomCode, userId } = req.body;
    if (!roomCode || !userId) {
        return res.status(400).json({ error: 'A szobak√≥d √©s a felhaszn√°l√≥ ID sz√ºks√©ges!' });
    }

    try {
        const [roomResult] = await db.execute('SELECT RoomID FROM Rooms WHERE RoomCode = ?', [roomCode]);
        if (roomResult.length === 0) {
            return res.status(404).json({ error: 'A megadott szobak√≥d nem l√©tezik!' });
        }

        const roomId = roomResult[0].RoomID;
        const [existingUser] = await db.execute('SELECT * FROM RoomParticipants WHERE RoomID = ? AND UserID = ?', [roomId, userId]);

        if (existingUser.length > 0) {
            return res.status(200).json({ message: 'M√°r bent vagy ebben a szob√°ban!', roomCode });
        }

        await db.execute('INSERT INTO RoomParticipants (RoomID, UserID) VALUES (?, ?)', [roomId, userId]);
        req.session.roomCode = roomCode;
        req.session.userId = userId;
        req.session.createdAt = Date.now();
        res.status(200).json({ message: 'Sikeresen csatlakozt√°l a szob√°hoz!', roomCode });
    } catch (error) {
        console.error('Hiba a szob√°hoz csatlakoz√°s sor√°n:', error.message);
        res.status(500).json({ error: 'Hiba t√∂rt√©nt a szob√°hoz csatlakoz√°s sor√°n.', details: error.message });
    }
});

// Aktu√°lis szoba lek√©rdez√©se a session alapj√°n
router.get('/current', (req, res) => {
    if (req.session.roomCode && (Date.now() - req.session.createdAt) < 7200000) { // 2 √≥ra
        return res.status(200).json({ roomCode: req.session.roomCode });
    }
    res.status(404).json({ error: 'Nincs akt√≠v szoba.' });
});


// Szob√°ban l√©v≈ë felhaszn√°l√≥k √©s l√©trehoz√≥ lek√©rdez√©se
router.get('/:roomCode/users', async (req, res) => {
    const { roomCode } = req.params;

    try {
        // Lek√©rdezz√ºk a szoba ID-t √©s a l√©trehoz√≥ UserID-j√°t
        const [roomResult] = await db.execute('SELECT RoomID, CreatedByUserID FROM Rooms WHERE RoomCode = ?', [roomCode]);
        if (roomResult.length === 0) {
            return res.status(404).json({ error: 'A megadott szobak√≥d nem l√©tezik!' });
        }

        const roomId = roomResult[0].RoomID;
        const creatorId = roomResult[0].CreatedByUserID;

        // Lek√©rdezz√ºk a l√©trehoz√≥ nev√©t
        const [creatorResult] = await db.execute('SELECT Username FROM Users WHERE UserID = ?', [creatorId]);
        const creatorName = creatorResult.length > 0 ? creatorResult[0].Username : 'Ismeretlen felhaszn√°l√≥';

        // Lek√©rdezz√ºk a szob√°ban l√©v≈ë felhaszn√°l√≥kat (kiv√©ve a l√©trehoz√≥t, ha k√ºl√∂n kell)
        const [users] = await db.execute(`
            SELECT u.Username 
            FROM RoomParticipants rp
            JOIN Users u ON rp.UserID = u.UserID
            WHERE rp.RoomID = ?
        `, [roomId]);

        res.status(200).json({ users, creator: creatorName });
    } catch (error) {
        console.error('üî• Hiba a szob√°ban l√©v≈ë felhaszn√°l√≥k lek√©rdez√©sekor:', error.message);
        res.status(500).json({ error: 'Hiba t√∂rt√©nt a szoba felhaszn√°l√≥inak lek√©rdez√©sekor.', details: error.message });
    }
});

// Szob√°b√≥l val√≥ kil√©p√©s
router.post('/leave', async (req, res) => {
    const { userId, roomCode } = req.body;

    if (!userId || !roomCode) {
        console.error('‚ö†Ô∏è Hi√°nyz√≥ adat a kil√©p√©shez:', req.body);
        return res.status(400).json({ error: 'Felhaszn√°l√≥i azonos√≠t√≥ √©s szobak√≥d sz√ºks√©ges!' });
    }

    try {
        // Lek√©rdezz√ºk a szoba ID-j√°t
        const [roomResult] = await db.execute('SELECT RoomID FROM Rooms WHERE RoomCode = ?', [roomCode]);
        if (roomResult.length === 0) {
            return res.status(404).json({ error: 'A megadott szobak√≥d nem l√©tezik!' });
        }

        const roomId = roomResult[0].RoomID;

        // Ellen≈ërizz√ºk, hogy a felhaszn√°l√≥ val√≥ban benne van-e a szob√°ban
        const [userCheck] = await db.execute('SELECT * FROM RoomParticipants WHERE RoomID = ? AND UserID = ?', [roomId, userId]);
        if (userCheck.length === 0) {
            req.session.roomCode = null;
            req.session.userId = null;
            return res.status(200).json({ message: 'A felhaszn√°l√≥ m√°r nem volt a szob√°ban, kil√©p√©s sikeres.' });
        }
        // T√∂r√∂lj√ºk a felhaszn√°l√≥t a szob√°b√≥l
        await db.execute('DELETE FROM RoomParticipants WHERE RoomID = ? AND UserID = ?', [roomId, userId]);
        console.log(`‚úÖ Felhaszn√°l√≥ (${userId}) sikeresen t√∂r√∂lve a ${roomCode} szob√°b√≥l.`);
        console.log(`‚úÖ Felhaszn√°l√≥ (ID: ${userId}) sikeresen kil√©pett a szob√°b√≥l (K√≥d: ${roomCode})`);

        // Session t√∂rl√©se, hogy az oldal √∫jrat√∂lt√©se ut√°n ne l√©ptessen vissza
        req.session.roomCode = null;
        req.session.userId = null;

        res.status(200).json({ message: 'Kil√©p√©s sikeres!' });
    } catch (error) {
        console.error('üî• Hiba a szob√°b√≥l val√≥ kil√©p√©s sor√°n:', error.message);
        res.status(500).json({ error: 'Hiba t√∂rt√©nt a szob√°b√≥l val√≥ kil√©p√©s sor√°n.', details: error.message });
    }
});

// Friss√≠ti egy felhaszn√°l√≥ "k√©szen √°llok" st√°tusz√°t
router.post('/ready', (req, res) => {
    const { roomId, userId, isReady } = req.body;

    const updateQuery = `
        UPDATE RoomParticipants 
        SET isReady = ? 
        WHERE RoomID = ? AND UserID = ?`;
    
    db.query(updateQuery, [isReady, roomId, userId], (err) => {
        if (err) {
            return res.status(500).json({ message: "Hiba t√∂rt√©nt", error: err });
        }

        // Ellen≈ërizz√ºk, hogy mindenki k√©szen √°ll-e
        const checkQuery = `
            SELECT COUNT(*) AS notReady 
            FROM RoomParticipants 
            WHERE RoomID = ? AND isReady = FALSE`;

        db.query(checkQuery, [roomId], (err, results) => {
            if (err) {
                return res.status(500).json({ message: "Hiba t√∂rt√©nt", error: err });
            }

            const allReady = results[0].notReady === 0;
            res.json({ success: true, allReady });
        });
    });
});

// Lek√©ri egy szoba √°llapot√°t
router.get('/:roomId/status', (req, res) => {
    const { roomId } = req.params;

    const checkQuery = `
        SELECT COUNT(*) AS notReady 
        FROM RoomParticipants 
        WHERE RoomID = ? AND isReady = FALSE`;

    db.query(checkQuery, [roomId], (err, results) => {
        if (err) {
            return res.status(500).json({ message: "Hiba t√∂rt√©nt", error: err });
        }

        const allReady = results[0].notReady === 0;
        res.json({ allReady });
    });
});

module.exports = router;