const express = require("express");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcrypt");
const db = require("../config/dbConfig"); // MySQL kapcsolat
const router = express.Router();

// üîπ Middleware a token ellen≈ërz√©s√©hez
const authenticateToken = (req, res, next) => {
    const token = req.cookies?.token || req.headers.authorization?.split(" ")[1];

    if (!token) {
        console.log("üî¥ Nincs token! Felhaszn√°l√≥ nincs bejelentkezve.");
        return res.json({ loggedIn: false });
    }

    jwt.verify(token, "jwt_secret_key", (err, decoded) => {
        if (err) {
            console.log("üî¥ √ârv√©nytelen token vagy lej√°rt!", err.message);
            return res.json({ loggedIn: false });
        }

        console.log(`‚úÖ Token √©rv√©nyes! Bejelentkezett felhaszn√°l√≥ ID: ${decoded.userId}`);
        req.user = decoded;
        next();
    });
};



// üîπ Bejelentkez√©si √°llapot ellen≈ërz√©se
router.get("/status", authenticateToken, (req, res) => {
    console.log(`‚ÑπÔ∏è Bejelentkez√©si st√°tusz lek√©rdezve. UserID: ${req.user.userId}`);
    res.json({ loggedIn: true, userId: req.user.userId });
});

// üîπ Kijelentkez√©s API
router.post("/logout", (req, res) => {
    console.log(`üëã Kijelentkez√©s t√∂rt√©nt. UserID: ${req.user ? req.user.userId : "Ismeretlen"}`);
    res.clearCookie("token", { httpOnly: true, secure: false });
    res.json({ message: "üëã Sikeres kijelentkez√©s!", loggedIn: false });
});

// üîπ Jelsz√≥v√°ltoztat√°s API
// üîπ Jelsz√≥v√°ltoztat√°s API
router.put("/change-password", authenticateToken, async (req, res) => {
    const { oldPassword, newPassword } = req.body;
    const userId = req.user.userId;

    if (!oldPassword || !newPassword) {
        return res.status(400).json({ error: "‚ùå Mindk√©t jelsz√≥ mez≈ë kit√∂lt√©se k√∂telez≈ë!" });
    }

    try {
        const [userRows] = await db.execute(
            "SELECT PasswordHash FROM Users WHERE UserID = ?", [userId]
        );

        if (userRows.length === 0) {
            return res.status(404).json({ error: "Felhaszn√°l√≥ nem tal√°lhat√≥!" });
        }

        const isPasswordValid = await bcrypt.compare(oldPassword, userRows[0].PasswordHash);
        if (!isPasswordValid) {
            return res.status(401).json({ error: "Hib√°s r√©gi jelsz√≥!" });
        }

        const hashedPassword = await bcrypt.hash(newPassword, 10);
        await db.execute("UPDATE Users SET PasswordHash = ? WHERE UserID = ?", [hashedPassword, userId]);

        res.json({ message: "üîí Jelsz√≥ sikeresen friss√≠tve!" });
    } catch (error) {
        res.status(500).json({ error: "Szerverhiba t√∂rt√©nt!" });
    }
});



module.exports = router;
