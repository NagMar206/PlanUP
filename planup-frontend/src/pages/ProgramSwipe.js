import React, { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom"; // Navig√°ci√≥ import√°l√°sa
import "../Style/ProgramSwipe.css";
import { useRef } from "react"; //useffect fetch hogy ne 2x hivja meg

function ProgramSwipe({ apiUrl, userId }) {
  const [program, setProgram] = useState(null);
  const [error, setError] = useState("");
  const [filters, setFilters] = useState({ duration: "", cost: "" });
  const [processedPrograms, setProcessedPrograms] = useState(new Set()); // L√°jk dislike k√∂z√∂s lista
  const [filterActive, setFilterActive] = useState(false);
  const navigate = useNavigate(); // Navig√°ci√≥ kezel√©se

  const magyarIdotartam = {
    half_day: "F√©l napos",
    whole_day: "Eg√©sz napos",
    weekend: "Eg√©sz h√©tv√©g√©s",
  };

  const magyarKoltseg = {
    free: "Ingyenes",
    paid: "Fizet≈ës",
  };

  const fetchFilteredProgram = async () => {
    console.log("üü¢ fetchFilteredProgram() megh√≠vva...");
  
    try {
      const response = await axios.get(`${apiUrl}/programs/random`);
      let fetchedProgram = response.data;
  
      if (!fetchedProgram) {
        console.log("‚ö†Ô∏è Nincs t√∂bb el√©rhet≈ë program.");
        setProgram(null);
        return;
      }
  
      let attempts = 0;
      const maxAttempts = 10; // Maximum pr√≥b√°lkoz√°sok sz√°ma
  
      // ‚úÖ Ha a program m√°r l√°jkolt vagy dislike-olt, √∫jrapr√≥b√°lkozunk
      while (processedPrograms.has(fetchedProgram.ProgramID) && attempts < maxAttempts) {
        console.warn(`‚ö†Ô∏è A backend egy m√°r feldolgozott programot adott vissza (ID: ${fetchedProgram.ProgramID}), √∫jrapr√≥b√°lkoz√°s...`);
        const retryResponse = await axios.get(`${apiUrl}/programs/random`);
        fetchedProgram = retryResponse.data;
        attempts++;
      }
  
      if (!fetchedProgram || processedPrograms.has(fetchedProgram.ProgramID)) {
        console.log("‚ùå Sikertelen pr√≥b√°lkoz√°sok, nincs √∫j program.");
        setProgram(null);
        return;
      }
  
      fetchedProgram.Cost = fetchedProgram.Cost ? "paid" : "free";
      fetchedProgram.Duration = 
    fetchedProgram.Duration === 1 ? "half_day" :
    fetchedProgram.Duration === 2 ? "whole_day" :
    fetchedProgram.Duration === 3 ? "weekend" : fetchedProgram.Duration;

      setProgram(fetchedProgram);
  
      console.log("üéØ Megjelen√≠tett program:", fetchedProgram.Name, `(ID: ${fetchedProgram.ProgramID})`);
  
    } catch (err) {
      setError("Nem siker√ºlt bet√∂lteni a programot.");
    }
  };
  

  // ‚úÖ Friss√≠tett useEffect, hogy ne fusson le k√©tszer

  const didFetch = useRef(false);
  
  useEffect(() => {
    if (!didFetch.current) {
      console.log("‚úÖ fetchFilteredProgram() lefut egyszer");
      fetchFilteredProgram();
      didFetch.current = true;
    } else {
      console.log("‚ö†Ô∏è fetchFilteredProgram() kihagyva (m√°r lefutott)");
    }
  }, [filterActive, filters]);
  
  
  const handleSwipe = async (action) => {
    if (!program) return;
  
    try {
      console.log(`üîº Like/dislike k√ºld√©se: UserID = ${userId}, ProgramID = ${program.ProgramID}, Action = ${action}`);
  
      const response = await axios.post(`${apiUrl}/programs/${program.ProgramID}/${action}`, { userId });
  
      console.log("‚úÖ Like/dislike m≈±velet v√°lasza:", response.data);
  
      // ‚úÖ Egyben kezelj√ºk a like √©s dislike-olt programokat
      setProcessedPrograms((prev) => new Set([...prev, program.ProgramID]));
  
      fetchFilteredProgram(); // Automatikusan √∫j program bet√∂lt√©se
  
    } catch (err) {
      console.error("‚ùå Nem siker√ºlt v√©grehajtani a m≈±veletet:", err);
  
      // ‚ö†Ô∏è Ha a hiba oka az, hogy m√°r like-oltuk, azonnal ugorjunk tov√°bb
      if (err.response && err.response.status === 400) {
        console.warn(`‚ö†Ô∏è A programot m√°r like-olt√°k (ID: ${program.ProgramID}), √∫j program bet√∂lt√©se...`);
        fetchFilteredProgram();
      } else {
        setError("Nem siker√ºlt v√©grehajtani a m≈±veletet.");
      }
    }
  };
  
 
  
  //most m√°r jobban m≈±k√∂dik a random, de n√©ha m√©g el≈ëfordul hogy 2x megjelenik ugyanaz, de tov√°bbl√©p√©sn√©l megfelel
  //dislike-olt programok kezel√©se (tal√°n megoldja az ism√©tl≈ëd√©st is!!!)
  
  return (
    <div className="program-swipe-container">
      <div className="filters">
        <select
          value={filters.duration}
          onChange={(e) => setFilters({ ...filters, duration: e.target.value })}
        >
          <option value="">√ñsszes id≈ëtartam</option>
          {Object.entries(magyarIdotartam).map(([key, value]) => (
            <option key={key} value={key}>{value}</option>
          ))}
        </select>

        <select
          value={filters.cost}
          onChange={(e) => setFilters({ ...filters, cost: e.target.value })}
        >
          <option value="">√ñsszes k√∂lts√©g</option>
          {Object.entries(magyarKoltseg).map(([key, value]) => (
            <option key={key} value={key}>{value}</option>
          ))}
        </select>

        <button onClick={() => {
          setFilterActive(!filterActive);
          fetchFilteredProgram(); 
        }}>
          {filterActive ? "Sz≈±r≈ë kikapcsol√°sa" : "Sz≈±r≈ë alkalmaz√°sa"}
        </button>
      </div>

      {error && <div className="error-message">{error}</div>}
      {!program && (
        <div className="no-program">
          <div className="no-program-box">
            <h2>üéâ Gratul√°lunk! üéâ</h2>
            <p>Minden el√©rhet≈ë programot v√©gign√©zt√©l.</p>
            <p>üîÑ Pr√≥b√°lj √∫j keres√©st, vagy n√©zz vissza k√©s≈ëbb √∫j lehet≈ës√©gek√©rt!</p>
            <button className="reload-button" onClick={fetchFilteredProgram}>üîÑ √öjrapr√≥b√°lkoz√°s</button>
            <button className="summary-button" onClick={() => navigate("/liked-programs")}>üìã √ñsszegz√©s megtekint√©se</button>
          </div>
        </div>
      )}
      {program && (
        <div className="program-card">
          <img src={`http://localhost:3001/images/${program.Image}`} alt={program.Name} className="program-image" />
          <h2>{program.Name}</h2>
          <p>{program.Description}</p>
          <p>üìç Helysz√≠n: {program.Location}</p>
          <p>‚è≥ Id≈ëtartam: {magyarIdotartam[program.Duration] || "Ismeretlen id≈ëtartam"}</p>
          <p>üí∞ K√∂lts√©g: {magyarKoltseg[program.Cost] || "Ismeretlen"}</p>
        </div>
      )}

      <div className="swipe-buttons">
        <button className="dislike-button" onClick={() => handleSwipe("dislike")}>
          Nem tetszik
        </button>
        <button className="like-button" onClick={() => handleSwipe("like")}>
          Tetszik
        </button>
      </div>
    </div>
  );
}

export default ProgramSwipe;
