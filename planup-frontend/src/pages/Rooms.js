import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { io } from 'socket.io-client';
import '../Style/Rooms.css';

function Rooms({ apiUrl, userId }) {
    const [roomCode, setRoomCode] = useState('');
    const [roomUsers, setRoomUsers] = useState([]);
    const [roomCreator, setRoomCreator] = useState('');
    const [error, setError] = useState('');
    const [successMessage, setSuccessMessage] = useState('');
    const [isInRoom, setIsInRoom] = useState(false);
    const [isReady, setIsReady] = useState(false);
    const [allReady, setAllReady] = useState(false);
    const navigate = useNavigate();
    const socketRef = useRef();

    useEffect(() => {
        socketRef.current = io(apiUrl, { withCredentials: true });

        socketRef.current.on('connect', () => {
            console.log('‚úÖ Sikeres Socket.io kapcsolat');
        });

        socketRef.current.on('updateUsers', (updatedUsers) => {
            setRoomUsers(Array.isArray(updatedUsers) ? updatedUsers : []);
        });

        socketRef.current.on('updateReadyStatus', (status) => {
            setAllReady(status);
        });

        return () => {
            socketRef.current.disconnect();
            console.log('üö™ Socket.io kapcsolat lez√°rva.');
        };
    }, [apiUrl]);

    useEffect(() => {
        const checkExistingRoom = async () => {
            try {
                const response = await axios.get(`${apiUrl}/rooms/current`, { withCredentials: true });
                if (response.data.roomCode) {
                    setRoomCode(response.data.roomCode);
                    fetchRoomUsers(response.data.roomCode);
                    checkReadyStatus(response.data.roomCode);
                    setIsInRoom(true);
                    socketRef.current.emit('joinRoom', response.data.roomCode);
                }
            } catch (err) {
                console.log('Nincs akt√≠v szoba.');
            }
        };
        checkExistingRoom();
    }, [apiUrl]);

    const createRoom = async () => {
        try {
            const response = await axios.post(`${apiUrl}/rooms`, { userId }, { withCredentials: true });
            setRoomCode(response.data.roomCode);
            setSuccessMessage(`Szoba l√©trehozva! K√≥d: ${response.data.roomCode}`);
            fetchRoomUsers(response.data.roomCode);
            setIsInRoom(true);
            socketRef.current.emit('joinRoom', response.data.roomCode);
            setTimeout(() => setSuccessMessage(''), 5000);
        } catch (err) {
            setError('Nem siker√ºlt l√©trehozni a szob√°t.');
        }
    };

    const joinRoom = async () => {
        if (!roomCode) return;
        try {
            const response = await axios.post(`${apiUrl}/rooms/join`, { roomCode, userId }, { withCredentials: true });
            setSuccessMessage(response.data.message);
            setIsInRoom(true);
            socketRef.current.emit('joinRoom', roomCode);
            fetchRoomUsers(roomCode);
            checkReadyStatus(roomCode);
            setTimeout(() => setSuccessMessage(''), 3000);
        } catch (err) {
            setError('Nem siker√ºlt csatlakozni a szob√°hoz.');
        }
    };

    const leaveRoom = async () => {
        try {
            await axios.post(`${apiUrl}/rooms/leave`, { userId, roomCode }, { withCredentials: true });
            setSuccessMessage('Kil√©pt√©l a szob√°b√≥l.');
            setRoomUsers([]);
            setRoomCreator('');
            setRoomCode('');
            setIsInRoom(false);
            socketRef.current.emit('leaveRoom', roomCode);
            setTimeout(() => setSuccessMessage(''), 3000);
        } catch (err) {
            setError('Nem siker√ºlt kil√©pni a szob√°b√≥l.');
        }
    };

    const fetchRoomUsers = async (roomCode) => {
        try {
            const response = await axios.get(`${apiUrl}/rooms/${roomCode}/users`, { withCredentials: true });
            const uniqueUsers = Array.isArray(response.data.users) ? [...new Map(response.data.users.map(user => [user.UserID, user])).values()] : [];
            setRoomUsers(uniqueUsers);
            setRoomCreator(response.data.creator || 'Ismeretlen felhaszn√°l√≥');
            socketRef.current.emit('refreshUsers', roomCode);
        } catch (err) {
            console.error('Nem siker√ºlt lek√©rni a szob√°ban l√©v≈ë felhaszn√°l√≥kat:', err.message);
        }
    };

    const toggleReadyStatus = async () => {
        const newReadyState = !isReady;
        setIsReady(newReadyState);
    
        try {
            const response = await axios.post(`${apiUrl}/rooms/ready`, {
                roomCode, 
                userId, 
                isReady: newReadyState 
            }, { withCredentials: true });
    
            console.log("üì¢ API v√°lasz:", response.data); // üîπ LOGOLJUK A V√ÅLASZT
    
            if (!response.data || response.data.success !== true) {
                throw new Error("√ârv√©nytelen v√°lasz az API-t√≥l");
            }
    
            setAllReady(response.data.allReady); // üîπ √ÅLL√çTSA BE AZ √ÅLLAPOTOT
    
            // üîπ GY≈êZ≈êDJ MEG R√ìLA, HOGY A KOMPONENS FRISS√úL
            setTimeout(() => {
                console.log("‚úÖ Friss√≠tett √°llapot:", response.data.allReady);
            }, 500);
    
            socketRef.current.emit('updateReady', roomCode);
            console.log("‚úÖ ReadyState sikeresen friss√≠tve:", response.data);
    
        } catch (err) {
            console.error('‚ùå Nem siker√ºlt friss√≠teni a k√©szenl√©ti √°llapotot:', err.message);
        }
    };
    
    const checkReadyStatus = async (roomCode) => {
        try {
            const response = await axios.get(`${apiUrl}/rooms/${roomCode}/readyStatus`, { withCredentials: true });
            setAllReady(response.data.allReady);
        } catch (err) {
            console.error('Nem siker√ºlt ellen≈ërizni a k√©szenl√©ti √°llapotot.');
        }
    };

    return (
        <div className="rooms-container">
            <h2 className="title">Szob√°k</h2>
            {error && <div className="error-message">{error}</div>}
            {successMessage && <div className="success-message">{successMessage}</div>}
            {!isInRoom && (
                <div className="create-room">
                    <button onClick={createRoom} className="create-room-button">Szoba l√©trehoz√°sa</button>
                </div>
            )}
            {!isInRoom && (
                <div className="join-room">
                    <input type="text" value={roomCode} onChange={(e) => setRoomCode(e.target.value)} placeholder="Szobak√≥d be√≠r√°sa" className="room-input" />
                    <button onClick={joinRoom} className="join-room-button">Csatlakoz√°s</button>
                </div>
            )}
            {isInRoom && (
                <div className="room-users">
                    <h3>Szob√°ban l√©v≈ë felhaszn√°l√≥k:</h3>
                    <p className="room-code-display">Szobak√≥d: {roomCode}</p>
                    <p><strong>Szoba l√©trehoz√≥ja:</strong> {roomCreator || 'Ismeretlen felhaszn√°l√≥'}</p>
                    <button className="refresh-button" onClick={() => fetchRoomUsers(roomCode)}>üîÑ Lista friss√≠t√©se</button>
                    <ul>
                        {roomUsers.length > 0 ? roomUsers.map((user, index) => (
                            <li key={user.UserID || index}>{user.Username}</li>
                        )) : <li key="no-users">Nincs jelenleg m√°sik felhaszn√°l√≥ a szob√°ban.</li>}
                    </ul>
                    <button 
                        onClick={toggleReadyStatus} 
                        className={`ready-button ${isReady ? 'ready' : 'not-ready'}`}
                    >
                        {isReady ? "‚úî K√©szen √°llok" : "‚úñ Nem √°llok k√©szen"}
                    </button>
                    <button 
                        onClick={() => navigate('/programswipe')} 
                        disabled={!allReady} 
                        className={`program-button ${allReady ? 'active' : 'disabled'}`} // üîπ Oszt√°ly hozz√°ad√°sa a CSS-hez
                    >
                        V√°logass a programok k√∂z√ºl
                    </button>
                    <button onClick={leaveRoom} className="leave-room-button">Kil√©p√©s a szob√°b√≥l</button>
                </div>
            )}
        </div>
    );
}

export default Rooms;
